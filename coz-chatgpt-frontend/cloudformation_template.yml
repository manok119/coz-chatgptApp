Mappings:
  RegionMap:
    us-east-1:
      S3hostedzoneID: Z3AQBSTGFYJSTF
      websiteendpoint: s3-website-us-east-1.amazonaws.com
    us-west-1:
      S3hostedzoneID: Z2F56UZL2M1ACD
      websiteendpoint: s3-website-us-west-1.amazonaws.com
    us-west-2:
      S3hostedzoneID: Z3BJ6K6RIION7M
      websiteendpoint: s3-website-us-west-2.amazonaws.com
    eu-west-1:
      S3hostedzoneID: Z1BKCTXD74EZPE
      websiteendpoint: s3-website-eu-west-1.amazonaws.com
    ap-southeast-1:
      S3hostedzoneID: Z3O0J2DXBE1FTB
      websiteendpoint: s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      S3hostedzoneID: Z1WCIGYICN2BYD
      websiteendpoint: s3-website-ap-southeast-2.amazonaws.com
    ap-northeast-1:
      S3hostedzoneID: Z2M4EHUR26P7ZW
      websiteendpoint: s3-website-ap-northeast-1.amazonaws.com
    sa-east-1:
      S3hostedzoneID: Z31GFT0UA1I2HV
      websiteendpoint: s3-website-sa-east-1.amazonaws.com
    sa-east-1:
      S3hostedzoneID: Z31GFT0UA1I2HV
      websiteendpoint: s3-website-sa-east-1.amazonaws.com
    ap-northeast-2:
      S3hostedzoneID: Z3W03O7B5YMIYP
      websiteendpoint: s3-website.ap-northeast-2.amazonaws.com
Parameters:
  ProjectName:
    Type: String
    Description: The name of the project being built.  This name will be used on a number of resources.
    Default: chatapp
  DeploymentBucketName:
    Description: DeploymentBucketName
    Type: String
    Default: 
  HostedZoneName:
    Description: HostedZoneName
    Type: String
    Default: 
  AcmCertificateArn:
    Description: AcmCertificateArn
    Type: String
    Default: 
    
Resources:

  EmptyS3LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  EmptyS3BucketLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
          - "EmptyS3LambdaExecutionRole"
          - "Arn"
      Runtime: "python3.7"
      # we give the function a large timeout
      # so we can wait for the bucket to be empty
      Timeout: 600
      Code:
        ZipFile: |
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          import json
          import boto3
          from botocore.vendored import requests

          def handler(event, context):
              try:
                  bucket = event['ResourceProperties']['BucketName']

                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket)
                      for obj in bucket.objects.filter():
                          s3.Object(bucket.name, obj.key).delete()

                  sendResponseCfn(event, context, "SUCCESS")
              except Exception as e:
                  print(e)
                  sendResponseCfn(event, context, "FAILED")


          def sendResponseCfn(event, context, responseStatus):
              response_body = {'Status': responseStatus,
                              'Reason': 'Log stream name: ' + context.log_stream_name,
                              'PhysicalResourceId': context.log_stream_name,
                              'StackId': event['StackId'],
                              'RequestId': event['RequestId'],
                              'LogicalResourceId': event['LogicalResourceId'],
                              'Data': json.loads("{}")}

              requests.put(event['ResponseURL'], data=json.dumps(response_body))

  DeploymentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref DeploymentBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  LambdaUsedToCleanUpArtifactStore:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: !GetAtt EmptyS3BucketLambda.Arn
      BucketName: !Ref DeploymentBucket

  ReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DeploymentBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${DeploymentBucket}/*'
            Principal: '*'
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
          - Key: "Service"
            Value: "chat"
      DistributionConfig:
        PriceClass: PriceClass_All
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
            ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Join [".",[!Ref DeploymentBucket,"s3-website","ap-northeast-2","amazonaws.com"]]
            Id: !Ref DeploymentBucketName
        Enabled: 'true'
        DefaultRootObject: index.html
        Aliases:
          - !Ref DeploymentBucketName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: !Ref DeploymentBucketName
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          CachedMethods:
            - GET
            - HEAD
          DefaultTTL: 60
          MinTTL: 0
          MaxTTL: 31536000
        ViewerCertificate: 
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref AcmCertificateArn
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ["",[!Ref 'HostedZoneName' , "."]]
      Comment: !Join ["",[StaticWebsiteRoute for , !Ref ProjectName]]
      RecordSets:
      - 
        Name: !Ref DeploymentBucketName
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2
